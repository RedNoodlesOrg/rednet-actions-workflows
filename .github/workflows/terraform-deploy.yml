name: Deploy with Terraform

on:
  pull_request:
    branches: [main]
    paths:
      - '**/*.tf'

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Install cloudflared to tunnel ssh
      - name: Install cloudflare
        run: |
          curl -L "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64" -o cloudflared
          sudo chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/cloudflared

      # Setup SSH Key for remote deployment
      - name: Set up SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" | base64 --decode > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: ${{ github.event_name == 'push' }}
        run: terraform apply -auto-approve -input=false
          
